<?xml version="1.0" encoding="utf-8"?>
<search>
  <entry>
    <title>今日树洞</title>
    <url>/2020/04/15/20041501/</url>
    <content><![CDATA[<div id="hexo-blog-encrypt" data-wpm="别试了 = =" data-whm="OOPS, these decrypted content may changed, but you can still have a look.">
  <div class="hbe-input-container">
  <input type="password" id="hbePass" placeholder="" />
    <label for="hbePass">密码：</label>
    <div class="bottom-line"></div>
  </div>
  <script id="hbeData" type="hbeData" data-hmacdigest="3fea260e64700d36898c5d808c8de1dcd2665083ca3335f07cfb99ace0192ef2">43585b966fdde9aae09e60ca1f281f2b3bbaeaa1859fba8d4957ac350334a3cbafddc1b26b31071cf3a0114afb8fe1efd0e37efced1822366d659c1f8d6508769ecd26bb98bea4de5a5176b4342f66e5327bf469e58ac99b1c8dfcebb62c132c</script>
</div>
<script src="/lib/blog-encrypt.js"></script><link href="/css/blog-encrypt.css" rel="stylesheet" type="text/css">]]></content>
      <tags>
        <tag>树洞</tag>
        <tag>考研</tag>
      </tags>
  </entry>
  <entry>
    <title>一个周末学会光线追踪？（一）</title>
    <url>/2020/04/10/20041001/</url>
    <content><![CDATA[<p>如题，反正我不行（理直气壮）。<br></p>
<h5 id="《Ray-Tracing-in-One-Weekend》"><a href="#《Ray-Tracing-in-One-Weekend》" class="headerlink" title="《Ray Tracing in One Weekend》"></a>《Ray Tracing in One Weekend》</h5><p>这其实是Peter Shirley老师的一本书，清晰地讲述了如何用C++来做一个简单的光线追踪引擎。这本书在GitHub上开源，换句话说，它是免费的。这本书其实是一个系列，一共三本，这本是最简单的一本。<br><br>书的传送门，点 <a href="https://raytracing.github.io/books/RayTracingInOneWeekend.html" target="_blank" rel="noopener">这里</a> 。<a id="more"></a><br><br>今天主要讲述学习这本书的准备工作，很简单，但什么也不知道的情况下也能浪费人很多时间。那么，进入正题：</p>
<h5 id="PPM文件的格式"><a href="#PPM文件的格式" class="headerlink" title="PPM文件的格式"></a>PPM文件的格式</h5><p>书上这这张图看着很明白。<br><img src="/images/20041001.jpg"/></p>
<blockquote>
<p>首先PPM图片可以用ASCII码描述,第一行的P3意味着这幅PPM图使用ASCII码描述的，当然还有其他的描述方法,比如RAW；<br><br>第二行是图像的宽高，单位是像素；<br><br>第三行就是像素颜色最大值，255是标准RGB颜色空间的最大值；<br><br>剩下的就是每个像素的RGB值了。描述顺序为从左到右，从上到下。<br></p>
</blockquote>
<p>ASCII码描述很容易理解，就是像素的RGB值。<br><img src="/images/20041002.png"/><br>其他的描述方法就很难理解了。<br><img src="/images/20041003.png"/></p>
<h5 id="PPM文件的查看工具"><a href="#PPM文件的查看工具" class="headerlink" title="PPM文件的查看工具"></a>PPM文件的查看工具</h5><p>这个从网上一搜基本答案就是PPMView，这是个非常小的工具，就十几kb。似乎的确是最好的选择，但我不认同。这东西太古老了，现在的Win10系统装上他之后基本都会发现缺少一个Active控件而无法打开。<br><br>其实PS就可以打开PPM文件，此外像书的作者也提到有在线网站可以查看PPM图片。<br><br>我鼓捣了会，最终选择了GIMP,这个软件的开发者其实就是PPM文件格式的开创者。想要了解他儿子找他爹总不会错。<br><br>再后来我发现其实支持ppm的看图软件有很多，比如我电脑上的默认看图软件IrfanView（比GIMP不知道轻便几十万倍），我真不知道之前我为什么脑抽鼓捣这个。</p>
<h5 id="Hello-World"><a href="#Hello-World" class="headerlink" title="Hello World"></a>Hello World</h5><p>了解了PPM文件格式其实我们就可以手动写一张图片，但一张图片就算只有几百像素连记带写也挺累人的，我们当然不会这么傻，一个简单的C++程序就可以帮助我们完成这项工作。</p>
<figure class="highlight cpp"><table><tr><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;iostream&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    <span class="keyword">const</span> <span class="keyword">int</span> image_width = <span class="number">200</span>;</span><br><span class="line">    <span class="keyword">const</span> <span class="keyword">int</span> image_height = <span class="number">100</span>;</span><br><span class="line"></span><br><span class="line">    <span class="built_in">std</span>::<span class="built_in">cout</span> &lt;&lt; <span class="string">"P3\n"</span> &lt;&lt; image_width &lt;&lt; <span class="string">' '</span> &lt;&lt; image_height &lt;&lt; <span class="string">"\n255\n"</span>;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">int</span> j = image_height<span class="number">-1</span>; j &gt;= <span class="number">0</span>; --j) &#123;</span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; image_width; ++i) &#123;</span><br><span class="line">            <span class="keyword">auto</span> r = <span class="keyword">double</span>(i) / image_width;</span><br><span class="line">            <span class="keyword">auto</span> g = <span class="keyword">double</span>(j) / image_height;</span><br><span class="line">            <span class="keyword">auto</span> b = <span class="number">0.2</span>;</span><br><span class="line">            <span class="keyword">int</span> ir = <span class="keyword">static_cast</span>&lt;<span class="keyword">int</span>&gt;(<span class="number">255.999</span> * r);</span><br><span class="line">            <span class="keyword">int</span> ig = <span class="keyword">static_cast</span>&lt;<span class="keyword">int</span>&gt;(<span class="number">255.999</span> * g);</span><br><span class="line">            <span class="keyword">int</span> ib = <span class="keyword">static_cast</span>&lt;<span class="keyword">int</span>&gt;(<span class="number">255.999</span> * b);</span><br><span class="line">            <span class="built_in">std</span>::<span class="built_in">cout</span> &lt;&lt; ir &lt;&lt; <span class="string">' '</span> &lt;&lt; ig &lt;&lt; <span class="string">' '</span> &lt;&lt; ib &lt;&lt; <span class="string">'\n'</span>;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>这段程序就可以输出一张PPM图片的ASCII描述内容，也不是很难理解。</p>
<h5 id="命令提示符中用-gt-直接输出PPM文件"><a href="#命令提示符中用-gt-直接输出PPM文件" class="headerlink" title="命令提示符中用 &gt; 直接输出PPM文件"></a>命令提示符中用 <code>&gt;</code> 直接输出PPM文件</h5><p>打开命令提示符，cd定位到我们C++代码的exe程序所在位置，<code>&gt; image.ppm</code> 直接输出PPM文件，如图：<br>&emsp;<br><img src="/images/20041004.png"/><br>回车输出，<code>.exe</code> 所在位置找到新生成的 <code>.ppm</code>，GIMP打开！<br><img src="/images/20041005.png"/><br>Ohhhhhh，虽然你很丑，但是为父爱你。</p>
]]></content>
      <tags>
        <tag>C/C++</tag>
        <tag>光线追踪</tag>
        <tag>PPM图片</tag>
      </tags>
  </entry>
  <entry>
    <title>不用加减乘除做加法</title>
    <url>/2020/04/08/20040801/</url>
    <content><![CDATA[<p>1 + 1 = ？<br><br>2、 10B、 王、 丰、 田、 申、 由、 甲 …<br><br>简单的题就是会出现一些奇奇怪怪的变体，不用加法去做加法，其实很自然想到位运算（关键其他的运算也没接触过）。<br><a id="more"></a></p>
<h6 id="以-5-7-12-为例，主要理解两点："><a href="#以-5-7-12-为例，主要理解两点：" class="headerlink" title="以 5 + 7 = 12 为例，主要理解两点："></a>以 <code>5 + 7 = 12</code> 为例，主要理解两点：</h6><ul>
<li>不考虑进位的加法运算等效 <code>异或</code> 运算，栗子： <code>101 ^ 111 = 010</code> ，显然不考虑进位是说任何一位的进位都不考虑；</li>
<li>可以用 <code>与</code> 运算计算进位，栗子： <code>101 &amp; 111 = 101</code>，这样我们就知道了第一位和第三位都需要进一，左移后与不进位结果相加就是进位结果了。相加仍有进位？显然这就是一个递归的过程，直到进位为0。<br></li>
</ul>
<p>然后就是代码了：</p>
<figure class="highlight cpp"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">add</span><span class="params">(<span class="keyword">int</span> a, <span class="keyword">int</span> b)</span> </span>&#123;</span><br><span class="line">	<span class="keyword">if</span>(a==<span class="number">0</span>) <span class="keyword">return</span> b;</span><br><span class="line">	<span class="keyword">else</span> <span class="keyword">if</span>(b==<span class="number">0</span>) <span class="keyword">return</span> a;</span><br><span class="line">	<span class="keyword">while</span>(b)&#123;                    <span class="comment">// b为0时加法结束</span></span><br><span class="line">		<span class="keyword">int</span> res = (a ^ b);   <span class="comment">// 求进位仍需要原a、b，res记录无进位结果</span></span><br><span class="line">		b = ((<span class="keyword">unsigned</span> <span class="keyword">int</span>)(a &amp; b) &lt;&lt; <span class="number">1</span>);</span><br><span class="line">		<span class="comment">// b记录进位</span></span><br><span class="line">		<span class="comment">// 某些编译器不支持负值左移要强制转换为无符号数</span></span><br><span class="line">		a = res;             <span class="comment">// 无进位结果赋予a，与进位b继续异或</span></span><br><span class="line">	&#125;</span><br><span class="line">	<span class="keyword">return</span> a;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
]]></content>
      <tags>
        <tag>C/C++</tag>
        <tag>位运算</tag>
      </tags>
  </entry>
  <entry>
    <title>汉明重量</title>
    <url>/2020/04/02/20040203/</url>
    <content><![CDATA[<p>汉明重量（Hamming Weight）：一串符号中非零符号的个数。<br></p>
<p>遇到了好多相似的题，做一个小小总结。<br><br>编写一个函数，输入是一个无符号整数，返回其二进制表达式中数字位为 <code>1</code> 的个数。<br></p>
<h4 id="偷懒万岁法"><a href="#偷懒万岁法" class="headerlink" title="偷懒万岁法"></a>偷懒万岁法</h4><figure class="highlight cpp"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">hammingWeight</span><span class="params">(<span class="keyword">uint32_t</span> n)</span> </span>&#123;</span><br><span class="line">	<span class="keyword">return</span> ((<span class="built_in">bitset</span>&lt;<span class="number">32</span>&gt;)n).count();</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<a id="more"></a>
<p>不要忘了 <code>#include &lt;bitset&gt;</code> 。</p>
<h4 id="挨个数数法"><a href="#挨个数数法" class="headerlink" title="挨个数数法"></a>挨个数数法</h4><p>其实也没有名字这么蠢啦，首先应先理解下<code>&lt;&lt;</code>。<br><br>无符号数左移补0，有符号数左移补符号位，举个栗子:<br><br><code>1 &lt;&lt; 5</code> 得到二进制数 <code>100000</code><br><br>接下来理解位运算符<code>&amp;</code>。<br><br>1和0两者与0相与都是0，与1相与都是本身。<br><br>那么奇怪的知识就学到了,<code>n &amp; (1 &lt;&lt; 5)</code>为真则n的倒数第6位为1，否则为0。上代码：</p>
<figure class="highlight cpp"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">hammingWeight</span><span class="params">(<span class="keyword">uint32_t</span> n)</span> </span>&#123;</span><br><span class="line">	<span class="keyword">int</span> ans = <span class="number">0</span>;</span><br><span class="line">	<span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">0</span>;i&lt;<span class="number">32</span>;++i)&#123;</span><br><span class="line">		<span class="keyword">if</span>(n &amp; (<span class="number">1</span> &lt;&lt; i))</span><br><span class="line">		ans++;</span><br><span class="line">	&#125;</span><br><span class="line">	<span class="keyword">return</span> ans;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<h4 id="n-amp-n-1-大法"><a href="#n-amp-n-1-大法" class="headerlink" title="n&amp;(n-1)大法"></a>n&amp;(n-1)大法</h4><p>一个很魔幻的位运算，它可以消去右数第一个1。<br><br>挨个消1，消完也就计数完了。就很Nice：</p>
<figure class="highlight cpp"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">hammingWeight</span><span class="params">(<span class="keyword">uint32_t</span> n)</span> </span>&#123;</span><br><span class="line">	<span class="keyword">int</span> ans = <span class="number">0</span>;</span><br><span class="line">	<span class="keyword">while</span>(n)&#123;</span><br><span class="line">		n &amp;= (n<span class="number">-1</span>);</span><br><span class="line">		ans++;</span><br><span class="line">	&#125;</span><br><span class="line">	<span class="keyword">return</span> ans;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

]]></content>
      <tags>
        <tag>C/C++</tag>
        <tag>位运算</tag>
        <tag>汉明</tag>
        <tag>Hamming</tag>
      </tags>
  </entry>
  <entry>
    <title>今日树洞</title>
    <url>/2020/04/02/20040202/</url>
    <content><![CDATA[<div id="hexo-blog-encrypt" data-wpm="别试了 = =" data-whm="OOPS, these decrypted content may changed, but you can still have a look.">
  <div class="hbe-input-container">
  <input type="password" id="hbePass" placeholder="" />
    <label for="hbePass">密码：</label>
    <div class="bottom-line"></div>
  </div>
  <script id="hbeData" type="hbeData" data-hmacdigest="71819030915ac0805218651cda232063026d2c98368f4a75401fb3a6dcd034b4">10b8a782221cd4cb8eb558641cff09280c2f336cb1c0f3bd0792425d11698d5c6115ba5577216f52b4eec9fa19bd40fdc98992702a4119ce5873f39c6072461b03ba187fe68ef971ca60e14601d8450c8b40dda9517d3fdb8d8cf0797a057c7ca92f911893448f5cd2a280a283bd15d74ce79db387b6f167ecc3a3e6f00f3e36</script>
</div>
<script src="/lib/blog-encrypt.js"></script><link href="/css/blog-encrypt.css" rel="stylesheet" type="text/css">]]></content>
      <tags>
        <tag>树洞</tag>
      </tags>
  </entry>
  <entry>
    <title>2.1 通信基础</title>
    <url>/2020/04/02/20040201/</url>
    <content><![CDATA[<h4 id="基本概念"><a href="#基本概念" class="headerlink" title="基本概念"></a>基本概念</h4><ol>
<li><p>数据：传送信息的实体<br><br>信号：数据的电气或电磁表现<br><br>数据和信号都分为“模拟的”和“数字的”。<br><br>码元：固定时长的信号波形（数字脉冲）表示一位k进制数，是数字信号的计量单位<br><br>一码元可以携带多个比特信息，使用k进制编码，有k种不同的码元。<a id="more"></a></p>
</li>
<li><p>一个数据通信系统主要划分为信源、信道、信宿三部分。<br><br>简单讲，信源就是起点，信道是媒介，信宿是终点。<br><br>按传输信号形式，信道分为模拟信道和数字信道；<br><br>按传输介质，信道分为无线信道和有线信道。<br><br>模拟信道传输宽带信号，称为宽带传输；<br><br>数字信道传输基带信号，称为基带传输。</p>
</li>
<li><p>从通信双方的交互方式看，可分为三种基本方式：<br><br>单工通信。<br><br>半双工通信。<br><br>全双工通信。</p>
</li>
<li><p>速率可以用码元传输速率和信息传输速率表示。<br><br>码元传输速率：单位时间传输码元个数，又称码元速率、波形速率、调制速率、符号速率，单位是波特（Baud）。<br><br>信息传输速率：单位时间传输比特数，又称信息速率、比特率，单位是比特/秒（bit/s）。</p>
<h4 id="奈氏准则与香农定理"><a href="#奈氏准则与香农定理" class="headerlink" title="奈氏准则与香农定理"></a>奈氏准则与香农定理</h4></li>
<li><p>奈奎斯特（Nyquist）定理又称奈氏准则，</p>
</li>
</ol>
]]></content>
      <tags>
        <tag>计算机网络</tag>
        <tag>王道总结</tag>
        <tag>物理层</tag>
      </tags>
  </entry>
  <entry>
    <title>今日树洞</title>
    <url>/2020/04/01/20040101/</url>
    <content><![CDATA[<div id="hexo-blog-encrypt" data-wpm="别试了 = =" data-whm="OOPS, these decrypted content may changed, but you can still have a look.">
  <div class="hbe-input-container">
  <input type="password" id="hbePass" placeholder="" />
    <label for="hbePass">密码：</label>
    <div class="bottom-line"></div>
  </div>
  <script id="hbeData" type="hbeData" data-hmacdigest="b06b4e0868365bb16e175be283fc87f2fe282020b97b79507d0380d4ad2b359d">338a02ab3c214e2371eecdbf8bbc5b9585bac9de3b9d156fad3f401f83d5d82db385524343012d089d271c2de323b616b1278fb1d1bd70e4e7f066c632ea6857a316c620dc42a1d31d7fdf25ab9b747a68052b4f8a3d755096c4539624774aa0c51a98e1c4bc3dac37837c27a672217ac56b479b6e9b9c6ec4a88909af7fe9a12f266c70073568940091fad56c273c6e4b3160e70cf28faf19136ae7812c31cc21ab7ee76eb8221b5fc65ecdbd1603b92da6aa494f56989744cec9aa5cae4c789442d599e35d13dcdf424605a97faeca8d43b2c03424b5386243c15a532ec6be</script>
</div>
<script src="/lib/blog-encrypt.js"></script><link href="/css/blog-encrypt.css" rel="stylesheet" type="text/css">]]></content>
      <tags>
        <tag>树洞</tag>
      </tags>
  </entry>
  <entry>
    <title>今日树洞</title>
    <url>/2020/03/31/20033103/</url>
    <content><![CDATA[<div id="hexo-blog-encrypt" data-wpm="别试了 = =" data-whm="OOPS, these decrypted content may changed, but you can still have a look.">
  <div class="hbe-input-container">
  <input type="password" id="hbePass" placeholder="" />
    <label for="hbePass">密码：</label>
    <div class="bottom-line"></div>
  </div>
  <script id="hbeData" type="hbeData" data-hmacdigest="58cff23a79fe942e69fa3d82ffa569f5d24f1d0b597ee0f6891f95023b48dc2c">134b6af1b57c086083f83cf6e21b10a8eff9ff850edf9623c7c439f1332591e849cf55e39ab22adb1b40328c49738a56b68b7eab79f80fd3f6a1a486f018fd25ca28bc4c5031c991a2285adbc76861dc0acc3aa508a2d12783f6162966855a51540eb2df3b085f60ecd5ba4ecacd10659f3ee0915a86838be57d0495c1700acf609e73841dd2409fd6f467f187783352dea51d46978f3b7484a4e76a570b3e60a05c448711e17abb632ba1402678ad83c13d38afe06c8abfad31c8764d7546515f7363a2a4f743bd10ca01154c032fa47f8febaec81eb9bd2f0e1b3542911974d07459cfc0cd37d8c6ff03f127f621b1caa9a9b82dd1046e70ce9fe71fdb2221d3ef0c36ede066f96e7a3ee3e906b72406d04d8db271edb8958bb1f9eb174ab9da62dfc94fe1d9692e034b4fcf11a7fd144290d1b5fe24a1c96f9267f1bd37988b5ba772f38b02fee19ac198600e28d85c322ac45500b22ceff785a469596b18423402ef9694c3d5c21f2e594f554cbdafacf63a7f2bcfec372cf2c3672caded83c8e3e09485a3840d937726c119eb9a7ee2d285b350c4177936c378456b0179</script>
</div>
<script src="/lib/blog-encrypt.js"></script><link href="/css/blog-encrypt.css" rel="stylesheet" type="text/css">]]></content>
      <tags>
        <tag>树洞</tag>
      </tags>
  </entry>
  <entry>
    <title>C/C++位运算符</title>
    <url>/2020/03/31/20033102/</url>
    <content><![CDATA[<table>
<thead>
<tr>
<th align="center">符号</th>
<th align="center">意义</th>
<th align="left">备注</th>
</tr>
</thead>
<tbody><tr>
<td align="center">&amp;</td>
<td align="center">与</td>
<td align="left">与1相与为本身，与0相与为0，n&amp;(n-1)消去右数第一个1</td>
</tr>
<tr>
<td align="center">^</td>
<td align="center">异或</td>
<td align="left">与0异或为本身</td>
</tr>
<tr>
<td align="center">&brvbar;</td>
<td align="center">或</td>
<td align="left"></td>
</tr>
<tr>
<td align="center">~</td>
<td align="center">取反</td>
<td align="left">注意不是“！”</td>
</tr>
<tr>
<td align="center">&lt;&lt;</td>
<td align="center">左移</td>
<td align="left">有符号数补符号位，无符号数补0</td>
</tr>
<tr>
<td align="center">&gt;&gt;</td>
<td align="center">右移</td>
<td align="left">&gt;&gt;1 可以简单看作 /2</td>
</tr>
</tbody></table>
]]></content>
      <tags>
        <tag>C/C++</tag>
        <tag>位运算</tag>
      </tags>
  </entry>
  <entry>
    <title>链表是否有环问题</title>
    <url>/2020/03/31/20033101/</url>
    <content><![CDATA[<h4 id="问题一：判断链表是否有环"><a href="#问题一：判断链表是否有环" class="headerlink" title="问题一：判断链表是否有环"></a>问题一：判断链表是否有环</h4><p><strong>快慢指针法</strong><br><br>表头开始，slow指针每次走一步，fast指针每次走两步。<br>两者相遇则有环，<code>fast==NULL || fast-&gt;next==NULL</code>则无环。<br>这一问题较为简单，但通过这一问题我们可以得到一个<strong>相遇点</strong>，有助于解决进一步的问题。<a id="more"></a></p>
<h4 id="问题二：求链表中环的距离"><a href="#问题二：求链表中环的距离" class="headerlink" title="问题二：求链表中环的距离"></a>问题二：求链表中环的距离</h4><p>问题一我们得到的相遇点就是环上的一点，因此求环的距离就变得很简单。<br>只需要记录相遇点的位置，从相遇点发出一个指针每次走一步并计数，再次到达相遇点时便求出了链表中环的距离。</p>
<h4 id="问题三：找到环的入口结点"><a href="#问题三：找到环的入口结点" class="headerlink" title="问题三：找到环的入口结点"></a>问题三：找到环的入口结点</h4><p><strong>解法一</strong>&emsp;基于问题二得到的距离，可以采用双指针法，一个指针从表头出发，另一个指针先走一个环的距离，再同表头指针一起前进。这两个指针一直隔着一个环的距离，那么他们再次相遇的点，是第一个指针刚进入环的点，即环的入口结点。<br><br><strong>解法二</strong>&emsp;相对而言，解法一比较容易理解，但还有一种更简单的方法得到环的入口结点。<br><br>同样是双指针法，但这次，一个指针在表头，另一个指针在问题一得到的相遇点。两指针再次相遇点即为环的入口结点。<br><br><img src="/images/20033101.png" /> <br><br>如图，表头为<code>A</code>，环入口为<code>B</code>，相遇点为<code>C</code>，AB距离为<code>a</code>，BC距离为<code>b</code>，环长度为<code>r</code>，那么CB距离为<code>r-b</code>。<br><br>slow指针走到C走的距离为<code>S = a + b</code>，fast走过的距离为slow的两倍，假设fast已经走了n圈，即<code>2S = a + nr + b</code>。<br>化简<code>2(a + b) = a + b + nr</code>，得到<code>a = nr - b = (n - 1)r + r - b</code>。<br>即<code>AB = (n - 1)r + CB</code>，解释一下就是A到B的距离，等于从C开始走n-1圈再走到B，不正是两点相遇？</p>
]]></content>
      <tags>
        <tag>数据结构</tag>
        <tag>链表</tag>
      </tags>
  </entry>
  <entry>
    <title>今日树洞</title>
    <url>/2020/03/30/20033002/</url>
    <content><![CDATA[<div id="hexo-blog-encrypt" data-wpm="别试了 = =" data-whm="OOPS, these decrypted content may changed, but you can still have a look.">
  <div class="hbe-input-container">
  <input type="password" id="hbePass" placeholder="" />
    <label for="hbePass">密码：</label>
    <div class="bottom-line"></div>
  </div>
  <script id="hbeData" type="hbeData" data-hmacdigest="f65c127879828622223f313d802f06c468d5689e9395966682f95312327c8f74">ae8f79f7a8931a4f1f06de233e716013c1c34d445eb994140154c0990bccbec7566833ec7cb22a7d1cd36eabb1cb07311a8b4fc5aae6305cbc72f73f74b6fb602963662609a05ae706db072d6222e4a04194d4bbc2641c3fe03c3ed34492402ef447ffe5a197b714cb6311f8ae88c2f409d843f54f11b100ab6cc3cdce568788a1a196885e12caad82bc166cce4e932f62c57ff2c1fdbd09c646c25e5faf79c3bf5d4ea68d1e9c2077462712728ec3c0cce793be7584ce2ca75015301434b7d8c136b023e4b8e6073b4f531b91ab57f7addef83eb295dd16294ca296b47d1a341ae0ca8c785514e97cc4ebfafca59dc76f01660a49ce9b09c1b70f655aac90e46e3a3e65f5b80e2a02f8b89e4bf05199a619e179780555c32a32a0d3bea2c8c298146a645309943062d135f8b5f194ee72f54a3b62ff3328cc8774af3c6036c38b75d02e046d7693e94db68d496e86abe3a534c0b7b7a5475c20da772c8d46016da55f77c60694adb0f49fded343273118bfd606fea8c31eac197be6db6aafaaa8e9a7085e3973f07d6df4d3617e9be2f2e1fa2c9014cb33cf21f3de27441405513d034c956de64157b3434a3570dadfa01b4f655462504d450ecb3a468b7719</script>
</div>
<script src="/lib/blog-encrypt.js"></script><link href="/css/blog-encrypt.css" rel="stylesheet" type="text/css">]]></content>
      <tags>
        <tag>树洞</tag>
        <tag>约瑟夫</tag>
      </tags>
  </entry>
  <entry>
    <title>1.2 体系结构与参考模型</title>
    <url>/2020/03/30/20033001/</url>
    <content><![CDATA[<ol>
<li>分层的目的：</li>
</ol>
<ul>
<li>降低协议设计和调试过程的复杂性</li>
<li>便于对网络进行研究、实现和维护</li>
<li>促进标准化工作<br><a id="more"></a></li>
</ul>
<ol start="2">
<li>层次越多，额外开销越大，效率越低；<br><br>层次越少，每层协议越复杂，清晰程度越低。<br>&emsp;</li>
<li>和楼层相似，层次越高，层数越大。<br><br>不同机器的同一层称为对等层，同一层的实体称为对等实体。<br><br>n层实体实现的服务为n+1层所利用。<br>&emsp;</li>
<li>每层都有自己的数据传送单位，即协议数据单元（PDU），<br><br>每个PDU都分为两部分：</li>
</ol>
<ul>
<li>服务数据单元（SDU）</li>
<li>协议控制信息（PCI）<br><br>物理层的PDU称为比特，链路层的PDU称为帧，网络层的PDU称为分组，传输层的PDU称为报文。<br><br>第n层的协议数据单元记为n-PDU，同理有n-SDU，n-PCI。<br><br><b>n-SDU + n-PCI = n-PDU = (n-1)-SDU</b><br>&emsp;</li>
</ul>
<ol start="5">
<li>网络协议（Network Protocol）是针对对等实体而言的，是水平的。<br><br>协议由语法、语义和同步三部分组成。<br>&emsp;</li>
<li>典型的接口上，同一结点相邻两层的实体通过服务访问点（Service Access Point，SAP）进行交互。<br><br>第n层的SAP就是第n+1层可以访问第n层服务的地方，SAP是一个抽象的概念，或者说，逻辑接口。<br>&emsp;</li>
<li>服务是指下层为紧邻的上层提供的功能调用，是垂直的。<br><br>OSI中将服务原语划分为4类：</li>
</ol>
<ul>
<li>请求（Request）。</li>
<li>指示（Indication）。</li>
<li>响应（Response）。</li>
<li>证实（Confirmation）。<br><br>有应答服务包括4类，无应答只有请求和指示。<br></li>
</ul>
<ol start="8">
<li>计算机网络提供的服务分类：</li>
</ol>
<ul>
<li>面向连接服务和无连接服务</li>
<li>可靠服务和不可靠服务</li>
<li>有应答服务和无应答服务</li>
</ul>
<ol start="9">
<li>ISO/OSI参考模型<br><br>第七层： 应用层（Application Layer）<br><br>第六层： 表示层（Presentation Layer）<br><br>第五层： 会话层（Session Layer）<br><br>第四层： 传输层（Transport Layer）<br><br>第三层： 网络层（Network Layer）<br><br>第二层： 数据链路层（Data Link Layer）<br><br>第一层： 物理层（Physical Layer）<br>&emsp;</li>
<li>物理层协议也称物理层规程。<br>&ensp;</li>
<li>TCP/IP模型<br><br>第四层： 应用层，即，OSI模型5、6、7层<br><br>第三层： 传输层，即，OSI第四层<br><br>第二层： 网际层，即，OSI第三层<br><br>第一层： 网络接口层，即，OSI模型1、2层<br>&emsp;</li>
<li>OSI网络层支持无连接和面向连接的通信，传输层仅有面向连接；<br><br>TCP/IP网络层仅有无连接，传输层有无连接和面向连接两种。<br>&emsp;</li>
</ol>
]]></content>
      <tags>
        <tag>计算机网络</tag>
        <tag>王道总结</tag>
      </tags>
  </entry>
  <entry>
    <title>1.1 概述</title>
    <url>/2020/03/29/20032901/</url>
    <content><![CDATA[<h5 id="计算机网络就是一些互联的、自治的计算机系统的集合。"><a href="#计算机网络就是一些互联的、自治的计算机系统的集合。" class="headerlink" title="计算机网络就是一些互联的、自治的计算机系统的集合。"></a>计算机网络就是一些互联的、自治的计算机系统的集合。</h5><h5 id="计算机网络基本特征："><a href="#计算机网络基本特征：" class="headerlink" title="计算机网络基本特征："></a>计算机网络基本特征：</h5><ul>
<li>目的：资源共享；</li>
<li>组成单元：分布在不同地理位置的多台独立的“自治计算机”；</li>
<li>网络中的计算机必须遵循的统一规则——网络协议。<a id="more"></a></li>
</ul>
<hr>
<h5 id="计算机网络的组成："><a href="#计算机网络的组成：" class="headerlink" title="计算机网络的组成："></a>计算机网络的组成：</h5><ul>
<li>组成部分：硬件、软件、协议；</li>
<li>工作方式：边缘部分、核心部分；</li>
<li>功能组成：通信子网、资源子网。</li>
</ul>
<hr>
<h5 id="计算机网络的功能："><a href="#计算机网络的功能：" class="headerlink" title="计算机网络的功能："></a>计算机网络的功能：</h5><ul>
<li>数据通信；</li>
<li>资源共享；</li>
<li>分布式处理；</li>
<li>提高可靠性；</li>
<li>负载均衡。</li>
</ul>
<hr>
<h5 id="计算机网络分类："><a href="#计算机网络分类：" class="headerlink" title="计算机网络分类："></a>计算机网络分类：</h5><ol>
<li>按分布范围：</li>
</ol>
<ul>
<li>广域网（WAN）; </li>
<li>城域网（MAN）; </li>
<li>局域网（LAN）; </li>
<li>个人区域网（PAN）, 无线个人区域网（WPAN）。</li>
</ul>
<ol start="2">
<li>按传输技术：</li>
</ol>
<ul>
<li>广播式网络；</li>
<li>点对点网络。</li>
</ul>
<ol start="3">
<li>按拓扑结构：</li>
</ol>
<ul>
<li>星形网络；</li>
<li>总线形网络；</li>
<li>环形网络；</li>
<li>网状形网络。</li>
</ul>
<ol start="4">
<li>按使用者：</li>
</ol>
<ul>
<li>公用网（Public Network）；</li>
<li>专用网（Private Network）。</li>
</ul>
<ol start="5">
<li>按交换技术：</li>
</ol>
<ul>
<li>电路交换网络；</li>
<li>报文交换网络；</li>
<li>分组交换网络（包交换网络）。</li>
</ul>
<ol start="6">
<li>按传输介质：</li>
</ol>
<ul>
<li>有线网络；</li>
<li>无线网络。</li>
</ul>
<hr>
<h5 id="因特网的所有标准都以RFC-Request-For-Comments-的形式在因特网上发布。"><a href="#因特网的所有标准都以RFC-Request-For-Comments-的形式在因特网上发布。" class="headerlink" title="因特网的所有标准都以RFC(Request For Comments)的形式在因特网上发布。"></a>因特网的所有标准都以RFC(Request For Comments)的形式在因特网上发布。</h5><h5 id="RFC要上升为因特网的正式标准需经过以下4个阶段："><a href="#RFC要上升为因特网的正式标准需经过以下4个阶段：" class="headerlink" title="RFC要上升为因特网的正式标准需经过以下4个阶段："></a>RFC要上升为因特网的正式标准需经过以下4个阶段：</h5><ul>
<li>因特网草案（Internet Draft）；</li>
<li>建议标准（Proposed Standard）；</li>
<li>草案标准（Draft Standard）；</li>
<li>因特网标准（Internet Standard）。</li>
</ul>
<hr>
<h5 id="网络标准化相关组织："><a href="#网络标准化相关组织：" class="headerlink" title="网络标准化相关组织："></a>网络标准化相关组织：</h5><ul>
<li>国际标准化组织（ISO）。</li>
<li>国际电信联盟（ITU）。</li>
<li>国际电气电子工程师协会（IEEE）。</li>
</ul>
<hr>
<h5 id="计算机网络性能指标："><a href="#计算机网络性能指标：" class="headerlink" title="计算机网络性能指标："></a>计算机网络性能指标：</h5><ul>
<li>带宽（Bandwidth）：网络的通信线路所能传送数据的能力，<br>即最高数据率，单位为比特/秒（b/s）。</li>
<li>时延（Delay）：发送时延、传播时延、处理时延、排队时延。</li>
<li>时延带宽积 = 传播时延 × 信道带宽。</li>
<li>往返时延（Round-Trip Time，RTT）：往 + 返。</li>
<li>吞吐量：给定时间内通过某个网络的数据量。真实数据总量。</li>
<li>速率（Speed）：数据率或比特率，指实际情况，最高速率就是带宽。</li>
</ul>
]]></content>
      <tags>
        <tag>计算机网络</tag>
        <tag>王道总结</tag>
      </tags>
  </entry>
</search>
